import aiogram
import logging
from aiogram import Bot, Dispatcher, executor, types
from aiogram.dispatcher.filters import Text
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters.state import State, StatesGroup
from decimal import Decimal
import sqlite3
import config
from db import Database
from config import token, id_channel1, not_sub_message, admin, cena, vremya, name_cheat, cena2, cena3
import murkups as nav
import loguru
from loguru import logger
import pyqiwip2p
from pyqiwip2p import QiwiP2P
import random, time, asyncio
import keyboard as kb
import ftplib

logging.basicConfig(level=logging.INFO)

storage = MemoryStorage()
# bot init
bot = Bot(token=token)
dp = Dispatcher(bot, storage=storage)
db = Database('users.db')

class Form(StatesGroup):
    start = State()  # Will be represented in storage as 'Form:name'

class info(StatesGroup):
  name = State()
  rasst = State()
  click = State()

class CountUsers(StatesGroup):
    count_users = State()

connect = sqlite3.connect('users.db')
cursor = connect.cursor()

cursor.execute("CREATE TABLE IF NOT EXISTS stat (user_id INTEGER, status INTEGER)")
connect.commit()

p2p = QiwiP2P(auth_key="eyJ2ZXJzaW9uIjoiUDJQIiwiZGF0YSI6eyJwYXlpbl9tZXJjaGFudF9zaXRlX3VpZCI6IjYzd3Z4Ny0wMCIsInVzZXJfaWQiOiIzNzUyNTU0NTgwMzMiLCJzZWNyZXQiOiI0MmE5NTI1NmU3MGQwNDBjMjcxZjc3ZGFlMzZkM2ZjYjQ1MjgxMWUzMDE3OTU5ZTY2Zjk2Yjg0YmQ1OTg3YWQ0In19")

logger.add("logs.ini", format="{time} | {message}")


#–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª
def check_sub(chat_member):
    print(chat_member['status'])
    if chat_member['status'] != 'left':
        return True
    else:
        return False

@dp.callback_query_handler(text="subchanneldone")
async def subchanneldone(message: types.Message):
    await bot.delete_message(message.from_user.id, message.message.message_id)
    if check_sub(await bot.get_chat_member(chat_id=id_channel1, user_id=message.from_user.id)):
        await bot.send_message(message.from_user.id, f"<b>–¢—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª—Å—è, –ø—Ä–æ–¥—É–±–ª–∏—Ä—É–π –∫–æ–º–º–∞–Ω–¥—É –∑–∞–Ω–æ–≤–æ</b>",  parse_mode='html', reply_markup=nav.mainMenu)
    else:
        await bot.send_message(message.from_user.id, not_sub_message, reply_markup=nav.checkSubMenu)

#–∫–æ–Ω–µ—Ü –ø—Ä–æ–≤–µ—Ä–∫–∏
        
        
        
#–∫–æ–º–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç    
@dp.message_handler(commands=['start'], commands_prefix='!?./')
async def start(message: types.Message):
    user_id = message.from_user.id
    username = message.from_user.username
    cursor.execute("SELECT * FROM stat WHERE user_id = ?", (user_id,))
    user = cursor.fetchone()
    if not user:
        cursor.execute("INSERT INTO stat (user_id, status) VALUES (?, ?)", (user_id, 0))
        connect.commit()
    if not db.user_exists(message.from_user.id):
        start_command = message.text
        referrer_id = str(start_command[7:])
        if str(referrer_id) != "":
            if str(referrer_id) != str(message.from_user.id):
                db.add_user(message.from_user.id, referrer_id)
                try:
                    await bot.send_message(referrer_id, "<b>–ü–æ –≤–∞—à–µ–π —Å—Å—ã–ª–∫–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –Ω–æ–≤—ã–π —á–µ–ª–æ–≤–µ–∫</b>",  parse_mode='html')
                except:
                    pass
            else:
                await bot.send_message(message.from_user.id, "<b>–ù–µ–ª—å–∑—è —Ä–µ–≥–∞—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è</b>")
        else:
            db.add_user(message.from_user.id)

    if check_sub(await bot.get_chat_member(chat_id=id_channel1, user_id=message.from_user.id)):
        await bot.send_message(message.from_user.id, f"<b>–ü—Ä–∏–≤–µ—Ç, —Å–º–æ—Ç—Ä–∏ –Ω–∞ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏ –Ω–∞–∂–∏–º–∞–π –Ω–∞ —Ç–æ —á—Ç–æ —Ç–µ–±–µ –Ω—É–∂–Ω–æ</b>",  parse_mode='html', reply_markup=nav.mainMenu)
    else:
        await bot.send_message(message.from_user.id, not_sub_message, reply_markup=nav.checkSubMenu)


#–∫–∞–ª–ª–±–µ–∫–∏ –æ–ø–ª–∞—Ç–∞
@dp.callback_query_handler(text="buy")
async def check(callback: types.CallbackQuery):
    comment = "revoluse" + str(random.randint(1000, 9999)) + "__navsegda" 
    bill = p2p.bill(amount=cena, lifetime=vremya, comment=comment)
    db.add_check(callback.from_user.id, bill.bill_id)
                
    await bot.send_message(callback.from_user.id, f"<b>–¢–æ–≤–∞—Ä: {name_cheat} | –ù–∞–≤—Å–µ–≥–¥–∞</b>\n<b>–¶–µ–Ω–∞: {cena}‚ÇΩ</b>\n<b>–ö–æ–ª-–≤–æ: 1 —à—Ç.</b>\n\n<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {bill.pay_url}\n\n<b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É {vremya} –º–∏–Ω—É—Ç</b>", reply_markup=nav.buy_menu(url=bill.pay_url, bill=bill.bill_id), parse_mode='html')

@dp.callback_query_handler(text="buy1")
async def check(callback: types.CallbackQuery):
    comment1 = "revoluse" + str(random.randint(1000, 9999)) + "__nedelya" 
    bill = p2p.bill(amount=cena2, lifetime=vremya, comment=comment1)
    db.add_check(callback.from_user.id, bill.bill_id)
                
    await bot.send_message(callback.from_user.id, f"<b>–¢–æ–≤–∞—Ä: {name_cheat} | –ù–µ–¥–µ–ª—è</b>\n<b>–¶–µ–Ω–∞: {cena2}‚ÇΩ</b>\n<b>–ö–æ–ª-–≤–æ: 1 —à—Ç.</b>\n\n<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {bill.pay_url}\n\n<b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É {vremya} –º–∏–Ω—É—Ç</b>", reply_markup=nav.buy_menu(url=bill.pay_url, bill=bill.bill_id), parse_mode='html')

@dp.callback_query_handler(text="buy2")
async def check(callback: types.CallbackQuery):
    comment2 = "revoluse" + str(random.randint(1000, 9999)) + "__mesyac" 
    bill = p2p.bill(amount=cena3, lifetime=vremya, comment=comment2)
    db.add_check(callback.from_user.id, bill.bill_id)
                
    await bot.send_message(callback.from_user.id, f"<b>–¢–æ–≤–∞—Ä: {name_cheat} | –ú–µ—Å—è—Ü</b>\n<b>–¶–µ–Ω–∞: {cena3}‚ÇΩ</b>\n<b>–ö–æ–ª-–≤–æ: 1 —à—Ç.</b>\n\n<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:</b> {bill.pay_url}\n\n<b>–í—Ä–µ–º—è –Ω–∞ –æ–ø–ª–∞—Ç—É {vremya} –º–∏–Ω—É—Ç</b>", reply_markup=nav.buy_menu(url=bill.pay_url, bill=bill.bill_id), parse_mode='html')

#–∫–∞–ª–ª–±–µ–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ–ø–ª–∞—Ç—ã
@dp.callback_query_handler(text_contains="check_")
async def check(callback: types.CallbackQuery):
    user_id = callback.from_user.id
    username = callback.from_user.username
    base = cursor.execute(f"SELECT * FROM stat").fetchall()
    status = cursor.execute("SELECT status from stat where user_id = ?",(callback.from_user.id,)).fetchone()
    status = int(status[0])
    bill = str(callback.data[6:])
    xwid = str(random.randint(1000, 9999)) + "RVLS"
    info = db.get_check(bill)
    if info != False:
        if str(p2p.check(bill_id=bill).status) == "PAID":
            with open('passwords.txt', 'a') as f:
                f.write(xwid + '  ' + str(user_id) + '\n')
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —Ö–æ—Å—Ç–∏–Ω–≥–∞
            session = ftplib.FTP("naebalovobrawlstars.tk")
            session.login("h1neky", "makras345su")
            session.cwd("/www/hinsite.ga/")
            file = open('passwords.txt','rb')                  # file to send
            session.storbinary('STOR passwords.txt', file)         # send the file
            file.close()                                   # close file and FTP
            session.quit()
            await bot.send_message(callback.from_user.id, f"–£—Å–ø–µ—à–Ω–æ —Ç–≤–æ–π –∫–ª—é—á {xwid} ! –í–æ—Ç –∑–∞—Ö–æ–¥–∏ –≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –∫–∞–Ω–∞–ª https://t.me/+ex3-471Dx2U3MTA1 —Ç–∞–º –±—É–¥—É—Ç —Ñ–∞–π–ª—ã, –∞ —á—Ç–æ –±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å hwid –ø—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –ø—Ä–∏–≤—è–∑–∞—Ç—å;)\n–ó–∞—è–≤–∫–∏ –≤ –ø—Ä–∏–≤–∞—Ç –≥—Ä—É–ø–ø—É –ø—Ä–∏–Ω–∏–º–∞—é—Ç –≤—Ä—É—á–Ω—É—é\n–ß—Ç–æ —Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, –ø–∏—Å–∞—Ç—å @hnkych")
            await bot.send_message(chat_id="-1001630566228", text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @{user_id} | {username} –ø—Ä–∏–æ–±—Ä—ë–ª —á–∏—Ç")
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} | {username} –ø—Ä–∏–æ–±—Ä—ë–ª —á–∏—Ç")
            cursor.execute(f'UPDATE stat SET status = {status + 1} WHERE user_id = "{user_id}"')
            connect.commit()  
            db.delete_check()
        else:
            await bot.send_message(callback.from_user.id, "–°—á—ë—Ç –Ω–µ –æ–ø–ª–∞—á–µ–Ω")
    else:
        await bot.send_message(callback.from_user.id, "–°—á—ë—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
        


#–∫–Ω–æ–ø–∫–∏        
@dp.message_handler()
async def users(message: types.Message):
            
    if message.text in ["–ö—É–ø–∏—Ç—å —á–∏—Çüí≤"]:
        if check_sub(await bot.get_chat_member(chat_id=id_channel1, user_id=message.from_user.id)):
            await bot.send_message(message.from_user.id, "<b>–í–æ—Ç –≤—Å–µ —Ç–æ–≤–∞—Ä—ã:</b>",  parse_mode='html', reply_markup=nav.mainSpisok)
        else:
            await bot.send_message(message.from_user.id, not_sub_message, reply_markup=nav.checkSubMenu)
        
    if message.text in ["–ê–¥–º–∏–Ω–ª–æ—Ö"]:
        if check_sub(await bot.get_chat_member(chat_id=id_channel1, user_id=message.from_user.id)):
            await bot.send_message(message.from_user.id, "—Ö—É–π",  parse_mode='html', reply_markup=kb.apanel)
        else:
            await bot.send_message(message.from_user.id, not_sub_message, reply_markup=nav.checkSubMenu)
     
    if message.text in ["–†–µ—Ñ. —Å–∏—Å—Ç–µ–º–∞üë®‚Äçüíº"]:
        user_id = message.from_user.id
        if check_sub(await bot.get_chat_member(chat_id=id_channel1, user_id=message.from_user.id)):
            await bot.send_message(message.from_user.id, f"<b>–ö–æ–ª-–≤–æ —Ä–µ—Ñ–µ—Ä–∞–ª–æ–≤: {db.count_reeferals(message.from_user.id)}</b>\n<b>–¢–≤–æ—è —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–∞—è —Åc—ã–ª–∫–∞: https://t.me/skeleton_seller_bot?start={user_id}</b>",  parse_mode='html')
        else:
            await bot.send_message(message.from_user.id, not_sub_message, reply_markup=nav.checkSubMenu)

    if message.text in ["–ü—Ä–∏–≤—è–∑–∞—Ç—å hwidüîêfewsw"]:
        user_id = message.from_user.id
        status = cursor.execute("SELECT status from stat where user_id = ?",(message.from_user.id,)).fetchone()
        if check_sub(await bot.get_chat_member(chat_id=id_channel1, user_id=message.from_user.id)):
            if int(status[0]) == 0:
                await bot.send_message(message.from_user.id, f"<b>–í—ã –Ω–µ –ø—Ä–∏–æ–±—Ä–µ–ª–∏ —á–∏—Ç</b>", parse_mode='html')
            else:
                await Form.start.set()
                await message.reply("–û—Ç–ø—Ä–∞–≤—å —Å—é–¥–∞ —Å–≤–æ–π —Ö–≤–∏–¥")
                await state.finish()
        else:
            await bot.send_message(message.from_user.id, not_sub_message, reply_markup=nav.checkSubMenu)

@dp.message_handler(state=Form.start)
async def process_name_step(message: types.Message, state: FSMContext):
    user_id = message.from_user.id
    text = message.text
    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –≤ —Ñ–∞–π–ª
    with open('hwids.txt', 'a') as f:
         f.write(text + '  ' + str(user_id) + '\n')
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–∫—Å—Ç–∞
    await message.reply('Hwid –∑–∞—Ä–µ–≥–∞–Ω!')
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å —Ö–æ—Å—Ç–∏–Ω–≥–∞
    session = ftplib.FTP("files.000webhost.com")
    session.login("h1neky", "makras345su")
    session.cwd("/public_html/")
    file = open('hwids.txt','rb')                  # file to send
    session.storbinary('STOR hwids.txt', file)     	   # send the file
    file.close()                                   # close file and FTP
    session.quit()
    await state.finish()
    
#–∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å
@dp.message_handler(commands=['adminka'])
async def adminstration(message: types.Message):
   if message.from_user.id == admin:
     await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∞–¥–º–∏–Ω –ø–∞–Ω–µ–ª—å.', reply_markup=kb.apanel)
   else:
     await message.answer('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –±–æ—Ç–∞!')

@dp.callback_query_handler(lambda c: c.data == "rass")
async def rass(callback_query: types.CallbackQuery):
   usid = callback_query.from_user.id
   if usid == admin:
      await bot.send_message(callback_query.message.chat.id, f'–í–≤–µ–¥–∏—Ç–µ —Ñ–æ—Ç–æ/—Ç–µ–∫—Å—Ç –¥–ª—è —Ä–∞—Å—Å—ã–ª–∫–∏.\n\n–î–ª—è –æ—Ç–º–µ–Ω—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ üëá', reply_markup=kb.back)
      await info.rasst.set()

@dp.callback_query_handler(lambda c: c.data == "getdb")
async def getdb(callback_query: types.CallbackQuery):
   usid = callback_query.from_user.id
   if usid == admin:
      get_db = open(f'logs.ini', 'rb')
      await bot.send_document(chat_id=callback_query.message.chat.id, document=get_db, caption=f'<b>üöÄ –î–µ—Ä–∂–∏!</b>', parse_mode='html')

@dp.message_handler(commands=['count'])
async def count_command(message: types.Message):
    users = cursor.execute("SELECT * FROM users")
    count_users = users.fetchall()
    if id == admin:
        await message.answer("–í –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–æ {} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π".format(len(count_users))) 

@dp.message_handler(content_types=types.ContentType.ANY, state=info.rasst)
async def rass(message: types.Message, state: FSMContext):
    cursor.execute(f'SELECT user_id FROM users')
    row = cursor.fetchall()
    connect.commit()
    users = [user[0] for user in row] 
    if message.text == '–û—Ç–º–µ–Ω–∞':
       await message.answer('–û—Ç–º–µ–Ω–∞! –í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.', reply_markup=types.ReplyKeyboardRemove())
       await state.finish()
    else:
       await message.answer('–ù–∞—á–∏–Ω–∞—é —Ä–∞—Å—Å—ã–ª–∫—É...')
       for i in users:
           try:
              await message.copy_to(i)
           except:
              pass

       await message.answer('–†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', reply_markup=types.ReplyKeyboardRemove())
       await state.finish()


logger.info(f"–ë–æ—Ç —Å–¥–µ–ª–∞–Ω h1neky;)")
if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)